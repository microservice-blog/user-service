import {
    ExecutionContext,
    Injectable,
    UnauthorizedException,
    ForbiddenException,
} from '@nestjs/common';
import {AuthGuard} from '@nestjs/passport';
import {Request} from 'express';

@Injectable()
export class JwtAuthenticationGuard extends AuthGuard('jwt') {
    handleRequest(err: any, user: any, info: any, context: ExecutionContext) {
        const req = context.switchToHttp().getRequest<Request>();

        // Debug log (tu·ª≥ ch·ªçn)
        console.log('üõ°Ô∏è JWT Guard Check:', {
            error: err,
            user,
            info,
            cookies: req.cookies,
        });

        const token = req.cookies?.Authentication;

        // ‚õî Kh√¥ng c√≥ token g·ª≠i l√™n
        if (!token) {
            throw new ForbiddenException({
                statusCode: 403,
                message: 'Kh√¥ng t√¨m th·∫•y token trong cookie! Vui l√≤ng ƒëƒÉng nh·∫≠p.',
                error: 'Forbidden',
            });
        }

        // ‚õî Token kh√¥ng h·ª£p l·ªá (gi·∫£i m√£ sai, kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng)
        if (info?.name === 'JsonWebTokenError') {
            throw new UnauthorizedException({
                statusCode: 401,
                message: 'Token kh√¥ng h·ª£p l·ªá!',
                error: 'Unauthorized',
            });
        }

        // ‚è∞ Token h·∫øt h·∫°n
        if (info?.name === 'TokenExpiredError') {
            throw {
                statusCode: 440, // Ho·∫∑c 401, tu·ª≥ h·ªá th·ªëng b·∫°n
                message: 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!',
                error: 'LoginTimeout',
            };
        }

        // ‚úÖ C√≥ l·ªói kh√°c ho·∫∑c kh√¥ng c√≥ user
        if (err || !user) {
            throw new UnauthorizedException({
                statusCode: 401,
                message: 'X√°c th·ª±c th·∫•t b·∫°i!',
                error: 'Unauthorized',
            });
        }

        return user;
    }
}